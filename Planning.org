#+TITLE: Green Engine Planning Document
#+AUTHOR: Ethan Breit

* Quick Explanation

The template for the Green Engine Planning Document is as follows. The first bullet is the general topic, the second bullet is the more specific sub-topic, the numbered bullets are answers.


* VERSION 2.2: (Design goals revised)

** Major Changes:
*** Gradually Drop support for OpenGL 4.5 and below.
*** All shaders should be compiled to SPIR-V
*** Revised ECS.

** Shaders and Materials
- Manifests
  - Uniforms
    - Manifests will now contain layout info of uniforms. This is done for Opengl 3.* compatability, this means we can now standardize uniform access across APIs (by name). The uniform info will be stored as a name and layout location.
- Building.
  - There should be a shader compilation stage to the build. This will convert all shaders into SPIR-V and generate manifest data for each shader.


* VERSION 2.0: 



** Shaders and Materials

*** Requirements and possible solutions
- Not restricting to user.
  - Don't make it required to use the Green Engine's Shader Utilities and pre built Shaders.

- Support multiple rendering styles.
  - Physically based rendering (PBR).
  - Phong (should be discouraged).
  - Blinn Phong.

- Flexable
  - Preferably a Dynamic amount of lights (might not be possible).
  - Global configuration file for shaders.

- Pre-Processor
  - include or equivelant
    1. ~( #pragma include " /PATH/ " )~ Would include another text document/shader into shader being built. Path should be relative to current file.
    2. ~( #pragma include < /PATH/ > )~ Would include another text document/shader into shader being built. Path should be relative to Head of resources directory.

- Shaders
  - Compatible with all APIS
    1. *SPIR-V*, *SPIR-V Cross*, and Shader Manifests
       * If all shaders where built into *SPIR-V* bytecode then *Vulkan* and newer versions of *OpenGL* (via KHR extension) can use the same shaders.
       * For older versions of *OpenGL* and *Metal*, *SPIR-V* Cross can be used in combination with automatically built shader manifest files

    2. Some Higher level shader language


** Loading

Need to create empty template clases to load data into so no OpenGL calls are made. OpenGL calls have to be on the OpenGL Thread (Rendering Thread) making asynchronouse loading impossible and also making loading freeze the entire game.

To add onto the previous statement we could aslo remove the data from the real vertex buffer class and have a pointer to the empty template class to retrieve the data. This would essentially make the real vertex buffer just a pointer with some functions.



